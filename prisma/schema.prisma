// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String?
  role      UserRole @default(CUSTOMER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Customer relations
  orders   Order[]
  wishlist WishlistItem[]
  reviews  Review[]

  // Admin relations
  managedProducts Product[] @relation("ProductManager")
  managedOrders   Order[]   @relation("OrderManager")

  @@map("users")
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String?
  price       Float
  image       String?
  image2      String?
  image3      String?
  image4      String?
  stock       Int      @default(0)
  sku         String?  @unique
  tags        String?
  featured    Boolean  @default(false)
  bestseller  Boolean  @default(false)
  seasonal    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  managerId String?
  manager   User?   @relation("ProductManager", fields: [managerId], references: [id])

  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id])

  orderItems    OrderItem[]
  wishlistItems WishlistItem[]
  reviews       Review[]

  @@map("products")
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  slug        String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  products Product[]

  @@map("categories")
}

model Order {
  id        String      @id @default(cuid())
  userId    String?
  user      User?       @relation(fields: [userId], references: [id])
  status    OrderStatus @default(PENDING)
  total     Float
  subtotal  Float
  tax       Float       @default(0)
  shipping  Float       @default(0)
  email     String?
  firstName String?
  lastName  String?
  address   String?
  city      String?
  state     String?
  zipCode   String?
  country   String?
  phone     String?
  notes     String?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  managerId String?
  manager   User?   @relation("OrderManager", fields: [managerId], references: [id])

  items OrderItem[]

  @@map("orders")
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float
  createdAt DateTime @default(now())

  @@map("order_items")
}

model WishlistItem {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())

  @@unique([userId, productId])
  @@map("wishlist_items")
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  rating    Int
  title     String?
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, productId])
  @@map("reviews")
}

model Banner {
  id        String   @id @default(cuid())
  title     String
  subtitle  String?
  image     String
  link      String?
  position  Int      @default(0)
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("banners")
}

model Promotion {
  id          String    @id @default(cuid())
  title       String
  description String?
  code        String?   @unique
  type        PromoType
  value       Float
  minAmount   Float?    @default(0)
  maxUses     Int?      @default(0)
  usedCount   Int       @default(0)
  startDate   DateTime
  endDate     DateTime
  active      Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("promotions")
}

enum UserRole {
  CUSTOMER
  ADMIN
  PRODUCT_MANAGER
  SUPPORT_STAFF
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PromoType {
  PERCENTAGE
  FIXED_AMOUNT
  FREE_SHIPPING
}
